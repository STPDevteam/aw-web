import { v } from 'convex/values';
import { internalMutation, internalQuery, internalAction } from './_generated/server';
import { api } from './_generated/api';
import { Id } from './_generated/dataModel';
import { ActionCtx } from './_generated/server';
import { chatCompletion } from './util/llm';

// --- Internal Query: Get Digital Twin ---
export const internal_getDigitalTwin = internalQuery({
  args: {
    userWalletAddress: v.string(),
  },
  async handler(ctx, args) {
    const digitalTwin = await ctx.db
      .query("digitalTwins")
      .withIndex("by_userWalletAddress", (q) => q.eq("userWalletAddress", args.userWalletAddress))
      .unique();
    return digitalTwin; // Returns the twin object or null if not found
  },
});

// --- Internal Action: Generate Description using chatCompletion ---
export const internal_generateDescription = internalAction({
    args: {
      profession: v.string(),
      interest: v.string(),
    },
    async handler(ctx, args) {
      try {
        const prompt = `
          Create a short, compelling, first-person backstory (2-3 sentences) for a digital character
          with the profession "${args.profession}" and primary interest "${args.interest}".
          Focus on making them sound intriguing and unique within a virtual social world.
          Example: "I've wandered these digital streets for longer than I can remember, always searching for the next great story. As a cosmic cartographer, I chart the unseen connections between worlds, but my real passion is uncovering ancient, forgotten melodies."
          ---
          Profession: ${args.profession}
          Interest: ${args.interest}
          ---
          Backstory:
        `;

        const { content: description } = await chatCompletion({
          messages: [{ role: 'user', content: prompt }],
          max_tokens: 150,
        });

        if (!description || description.trim() === '') {
          throw new Error('LLM returned an empty description.');
        }

        return description.trim();

      } catch (error) {
        console.error("Error generating description with chatCompletion:", error);
        return `A ${args.profession} deeply interested in ${args.interest}. They possess a unique perspective shaped by their experiences in the digital realm.`;
      }
    },
});


// --- Internal Mutation: Create Digital Twin ---
export const internal_createDigitalTwin = internalMutation({
  args: {
    userWalletAddress: v.string(),
    profession: v.string(),
    interest: v.string(),
    description: v.string(), // Description generated by the action
    name: v.string(), // Name for the twin
    // Add other relevant fields as needed, e.g., avatarUrl, initial stats, etc.
  },
  async handler(ctx, args) {
    // 1. Check if a twin already exists for this wallet address
    const existingTwin = await ctx.db
      .query("digitalTwins")
      .withIndex("by_userWalletAddress", (q) => q.eq("userWalletAddress", args.userWalletAddress))
      .unique();

    if (existingTwin) {
      // Throw an error if a twin already exists to prevent duplicates
      // The HTTP handler should catch this and return an appropriate status code (e.g., 409 Conflict)
      throw new Error(`Digital twin already exists for wallet address: ${args.userWalletAddress}`);
    }

    // 2. Insert the new digital twin document
    const twinId = await ctx.db.insert("digitalTwins", {
      userWalletAddress: args.userWalletAddress,
      profession: args.profession,
      interest: args.interest,
      description: args.description,
      name: args.name,
      // Initialize any other fields here
      createdAt: Date.now(), // Add a timestamp
    });

    return twinId; // Return the ID of the newly created twin
  },
}); 